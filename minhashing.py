# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_minhashing', [dirname(__file__)])
        except ImportError:
            import _minhashing
            return _minhashing
        if fp is not None:
            try:
                _mod = imp.load_module('_minhashing', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _minhashing = swig_import_helper()
    del swig_import_helper
else:
    import _minhashing
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _minhashing.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _minhashing.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _minhashing.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _minhashing.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _minhashing.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _minhashing.SwigPyIterator_equal(self, x)

    def copy(self):
        return _minhashing.SwigPyIterator_copy(self)

    def next(self):
        return _minhashing.SwigPyIterator_next(self)

    def __next__(self):
        return _minhashing.SwigPyIterator___next__(self)

    def previous(self):
        return _minhashing.SwigPyIterator_previous(self)

    def advance(self, n):
        return _minhashing.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _minhashing.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _minhashing.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _minhashing.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _minhashing.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _minhashing.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _minhashing.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _minhashing.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class doc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doc, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _minhashing.doc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _minhashing.doc___nonzero__(self)

    def __bool__(self):
        return _minhashing.doc___bool__(self)

    def __len__(self):
        return _minhashing.doc___len__(self)

    def pop(self):
        return _minhashing.doc_pop(self)

    def __getslice__(self, i, j):
        return _minhashing.doc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _minhashing.doc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _minhashing.doc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _minhashing.doc___delitem__(self, *args)

    def __getitem__(self, *args):
        return _minhashing.doc___getitem__(self, *args)

    def __setitem__(self, *args):
        return _minhashing.doc___setitem__(self, *args)

    def append(self, x):
        return _minhashing.doc_append(self, x)

    def empty(self):
        return _minhashing.doc_empty(self)

    def size(self):
        return _minhashing.doc_size(self)

    def clear(self):
        return _minhashing.doc_clear(self)

    def swap(self, v):
        return _minhashing.doc_swap(self, v)

    def get_allocator(self):
        return _minhashing.doc_get_allocator(self)

    def begin(self):
        return _minhashing.doc_begin(self)

    def end(self):
        return _minhashing.doc_end(self)

    def rbegin(self):
        return _minhashing.doc_rbegin(self)

    def rend(self):
        return _minhashing.doc_rend(self)

    def pop_back(self):
        return _minhashing.doc_pop_back(self)

    def erase(self, *args):
        return _minhashing.doc_erase(self, *args)

    def __init__(self, *args):
        this = _minhashing.new_doc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _minhashing.doc_push_back(self, x)

    def front(self):
        return _minhashing.doc_front(self)

    def back(self):
        return _minhashing.doc_back(self)

    def assign(self, n, x):
        return _minhashing.doc_assign(self, n, x)

    def resize(self, *args):
        return _minhashing.doc_resize(self, *args)

    def insert(self, *args):
        return _minhashing.doc_insert(self, *args)

    def reserve(self, n):
        return _minhashing.doc_reserve(self, n)

    def capacity(self):
        return _minhashing.doc_capacity(self)
    __swig_destroy__ = _minhashing.delete_doc
    __del__ = lambda self: None
doc_swigregister = _minhashing.doc_swigregister
doc_swigregister(doc)

class all_doc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, all_doc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, all_doc, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _minhashing.all_doc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _minhashing.all_doc___nonzero__(self)

    def __bool__(self):
        return _minhashing.all_doc___bool__(self)

    def __len__(self):
        return _minhashing.all_doc___len__(self)

    def pop(self):
        return _minhashing.all_doc_pop(self)

    def __getslice__(self, i, j):
        return _minhashing.all_doc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _minhashing.all_doc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _minhashing.all_doc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _minhashing.all_doc___delitem__(self, *args)

    def __getitem__(self, *args):
        return _minhashing.all_doc___getitem__(self, *args)

    def __setitem__(self, *args):
        return _minhashing.all_doc___setitem__(self, *args)

    def append(self, x):
        return _minhashing.all_doc_append(self, x)

    def empty(self):
        return _minhashing.all_doc_empty(self)

    def size(self):
        return _minhashing.all_doc_size(self)

    def clear(self):
        return _minhashing.all_doc_clear(self)

    def swap(self, v):
        return _minhashing.all_doc_swap(self, v)

    def get_allocator(self):
        return _minhashing.all_doc_get_allocator(self)

    def begin(self):
        return _minhashing.all_doc_begin(self)

    def end(self):
        return _minhashing.all_doc_end(self)

    def rbegin(self):
        return _minhashing.all_doc_rbegin(self)

    def rend(self):
        return _minhashing.all_doc_rend(self)

    def pop_back(self):
        return _minhashing.all_doc_pop_back(self)

    def erase(self, *args):
        return _minhashing.all_doc_erase(self, *args)

    def __init__(self, *args):
        this = _minhashing.new_all_doc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _minhashing.all_doc_push_back(self, x)

    def front(self):
        return _minhashing.all_doc_front(self)

    def back(self):
        return _minhashing.all_doc_back(self)

    def assign(self, n, x):
        return _minhashing.all_doc_assign(self, n, x)

    def resize(self, *args):
        return _minhashing.all_doc_resize(self, *args)

    def insert(self, *args):
        return _minhashing.all_doc_insert(self, *args)

    def reserve(self, n):
        return _minhashing.all_doc_reserve(self, n)

    def capacity(self):
        return _minhashing.all_doc_capacity(self)
    __swig_destroy__ = _minhashing.delete_all_doc
    __del__ = lambda self: None
all_doc_swigregister = _minhashing.all_doc_swigregister
all_doc_swigregister(all_doc)

class doc_set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doc_set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doc_set, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _minhashing.doc_set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _minhashing.doc_set___nonzero__(self)

    def __bool__(self):
        return _minhashing.doc_set___bool__(self)

    def __len__(self):
        return _minhashing.doc_set___len__(self)

    def append(self, x):
        return _minhashing.doc_set_append(self, x)

    def __contains__(self, x):
        return _minhashing.doc_set___contains__(self, x)

    def __getitem__(self, i):
        return _minhashing.doc_set___getitem__(self, i)

    def add(self, x):
        return _minhashing.doc_set_add(self, x)

    def discard(self, x):
        return _minhashing.doc_set_discard(self, x)

    def __init__(self, *args):
        this = _minhashing.new_doc_set(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _minhashing.doc_set_empty(self)

    def size(self):
        return _minhashing.doc_set_size(self)

    def clear(self):
        return _minhashing.doc_set_clear(self)

    def swap(self, v):
        return _minhashing.doc_set_swap(self, v)

    def count(self, x):
        return _minhashing.doc_set_count(self, x)

    def begin(self):
        return _minhashing.doc_set_begin(self)

    def end(self):
        return _minhashing.doc_set_end(self)

    def rbegin(self):
        return _minhashing.doc_set_rbegin(self)

    def rend(self):
        return _minhashing.doc_set_rend(self)

    def erase(self, *args):
        return _minhashing.doc_set_erase(self, *args)

    def find(self, x):
        return _minhashing.doc_set_find(self, x)

    def lower_bound(self, x):
        return _minhashing.doc_set_lower_bound(self, x)

    def upper_bound(self, x):
        return _minhashing.doc_set_upper_bound(self, x)

    def equal_range(self, x):
        return _minhashing.doc_set_equal_range(self, x)

    def insert(self, __x):
        return _minhashing.doc_set_insert(self, __x)
    __swig_destroy__ = _minhashing.delete_doc_set
    __del__ = lambda self: None
doc_set_swigregister = _minhashing.doc_set_swigregister
doc_set_swigregister(doc_set)


def read(arg1):
    return _minhashing.read(arg1)
read = _minhashing.read

def hash_func(arg1, arg2):
    return _minhashing.hash_func(arg1, arg2)
hash_func = _minhashing.hash_func

def min_hashing(arg1, arg2):
    return _minhashing.min_hashing(arg1, arg2)
min_hashing = _minhashing.min_hashing

def get_signature(arg1, arg2):
    return _minhashing.get_signature(arg1, arg2)
get_signature = _minhashing.get_signature

def jaccard_similarity(*args):
    return _minhashing.jaccard_similarity(*args)
jaccard_similarity = _minhashing.jaccard_similarity
# This file is compatible with both classic and new-style classes.


